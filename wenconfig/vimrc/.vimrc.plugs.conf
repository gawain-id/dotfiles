""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" WEN VIMRC PLUGINS CONFIGURE FILE
"
" @File ~/.vimrc.plugs.conf
" @Author: gawain@outlook.com
" @Version: 0.1
" @Last: 2020/08/07 10:12
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" FUNCTIONS BEGIN
    function! PlugInstalled(plug)                           " Check if the plugin has been installed.
        return has_key(g:plugs, a:plug)
    endfunction
" FUNCTIONS END

" PLUGIN CONFIGUARE BEGIN

" COLOR PLUGIN {
    "Plug 'altercation/vim-colors-solarized' {              " Default Solarized scheme.
        if PlugInstalled('vim-colors-solarized')
            syntax enable                                   " Enable syntax highlight.
            set background=dark                             " Set background dark.
            colorscheme solarized                           " Set Color scheme.

            "hi IndentGuidesOdd  guibg=red   ctermbg=3      " Indentation guide plugin Even-numbered lines Background color.
            "hi IndentGuidesEven guibg=green ctermbg=4      " Indentation guide plugin Odd lines background color.
            hi Defx_git_Untracked guifg=#FF0000
            call togglebg#map('<Leader><F5>')               " Togggle background
        endif
    " }
" }

" INTERFACE PLUGINS {
   " Plug 'kien/rainbow_parentheses.vim' {                  " Better Rainbow Parentheses.
        if PlugInstalled('rainbow_parentheses.vim')
            augroup ag#rainbow_parentheses
                au VimEnter * RainbowParenthesesToggleAll   " Enable all types of brackets.
                "au Syntax * RainbowParenthesesLoadRound
                "au Syntax * RainbowParenthesesLoadSquare
                "au Syntax * RainbowParenthesesLoadBraces
            augroup END
        endif
    " }

    " Plug 'liuchengxu/vim-which-key' {                     " Displays available keybindings, in popup.
        if PlugInstalled('vim-which-key')
            "let g:maplocalleader = ','
            "set timeoutlen=500

            "nnoremap <silent> <leader> :WhichKey '<Space>'<CR>
            "nnoremap <silent> <localleader> :<c-u>WhichKey  ','<CR>
        endif
    " }

    " Plug 'mg979/vim-visual-multi'{                        " Visual-Multi (VM in short) is a
        if PlugInstalled('vim-visual-multi')                " multiple selections/cursors.
            let g:VM_mouse_mappings = 1                     " Enable mouse mapping.
        endif
    " }

    " Plug 'mhinz/vim-startify' {                           " Startify is a plugin that shows recently used files,bookmarks,
                                                            " commands and sessions that were saved to a certain directory.
        if PlugInstalled('vim-startify')
            let g:startify_custom_header = [
                \ '                                               ',
                \ '__      _____ _  _  __   _____ __  __ ___  ___ ',
                \ '\ \    / / __| \| | \ \ / /_ _|  \/  | _ \/ __|',
                \ ' \ \/\/ /| _|| .` |  \ V / | || |\/| |   / (__ ',
                \ '  \_/\_/ |___|_|\_|   \_/ |___|_|  |_|_|_\\___|',
                \ '                                               ',
                \ ]
        endif
    " }

    " Plug 'myusuf3/numbers.vim' {                          " Numbers.vim is a plugin for intelligently toggling line numbers.
        if PlugInstalled('numbers.vim')                     " Exclude items.
            let g:numbers_exclude = [
                \ 'tagbar',
                \ 'gundo',
                \ 'minibufexpl',
                \ 'nerdtree'
                \ ]
            nnoremap <F3> :NumbersToggle<CR>                " Toggle number.
            nnoremap <F4> :NumbersOnOff<CR>                 " Toggle relative number.
        endif
    " }

    " Plug 'tpope/vim-surround' {                           " This plugin is a tool for dealing with pairs of surroundings.
        if PlugInstalled('vim-surround')
            " NOTHING
        endif
    " }

   " Plug 'vim-airline/vim-airline' {                       " Lean & mean status/tabline for vim that's light as air.
        if PlugInstalled('vim-airline')
            let g:airline#extensions#tabline#enabled = 1
            let g:airline#extensions#tabline#left_sep = ' '
            let g:airline#extensions#tabline#left_alt_sep = '|'
            let g:airline#extensions#tabline#formatter = 'default'
            let g:airline#extensions#tabline#buffer_nr_show = 1
        endif
    " }

   " Plug 'vim-airline/vim-airline-themes' {                " Airline plugin theme.
        if PlugInstalled('vim-airline-themes')
            " NOTHING
        endif
    " }

   " Plug 'vim-scripts/BOOKMARKS--Mark-and-Highlight-Full-Lines' {
                                                            " Highlight marks.
        if PlugInstalled('BOOKMARKS--Mark-and-Highlight-Full-Lines')
            " NOTHING
        endif
    " }

" }

" FILE MANAGEMENT PLUGINS {
    "Plug 'Yggdroot/LeaderF' {                              " An efficient fuzzy finder that helps to locate files, buffers,
                                                            " mrus, gtags, etc. on the fly.
        if PlugInstalled('LeaderF')
            let g:Lf_StlColorscheme = 'powerline'
            let g:Lf_WildIgnore = {
                \ 'dir': ['.svn','.git','.hg'],
                \ 'file': ['*.sw?','~$*','*.bak','*.exe','*.o','*.so','*.py[co]']
                \ }
            let g:Lf_Ctags = '/usr/bin/ctags'
            let g:Lf_RootMarkers = ['.root', '.svn', '.git', '.project', 'package.json', '.ROOT', '.hg']

            let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
            let g:gutentags_ctags_extra_args += ['--c++-kinds=+pxI']
            let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
            let g:Lf_CtagsFuncOpts = {
                \ 'c': '--c-kinds=+px --fields=+niazS --extra=+q',
                \ 'c++': '--c++-kinds=+pxI --fields=+niazS --extra=+q',
                \ }
        endif
    " }

    " Plug 'easymotion/vim-easymotion' {                    " EasyMotion provides a much simpler way to use some motions in vim.
        if PlugInstalled('vim-easymotion')

        endif
    " }

    " Plug 'farmergreg/vim-lastplace' {                     " Intelligently reopen files at your last edit position.
        if PlugInstalled('vim-lastplace')
            let g:lastplace_ignore =  'gitcommit,gitrebase,svn,hgcommit'
            let g:lastplace_ignore_buftype = 'quckfix,nofile,help'
            let g:lastplace_open_folds = 0
        endif
    " }

    " Plug 'liuchengxu/vim-clap' {                          " Vim-clap is a modern generic interactive finder and dispatcher.
        if PlugInstalled('vim-clap')
            let g:clap_theme = 'material_design_dark'

            let g:clap_layout = {'relative': 'editor'}
            let g:clap_layout = {'width': '95%', 'col': '5%'}
        endif
    " }

    " Plug 'liuchengxu/vista.vim' {                         " View and search LSP symbols, tags in Vim/NeoVim.
        if PlugInstalled('vista.vim')
            let g:vista_sidebar_width=35
            let g:vista_default_executive = 'coc'
            let g:airline#extensions#vista#enabled = 0

            nnoremap <Leader>tt :Vista!!<CR>
            autocmd bufenter * if (winnr('$') == 1 && exists('t:__vista__')) | q | endif
        endif

    " }

    " Plug 'ludovicchabant/vim-gutentags' {                 " Gutentags is a plugin that takes care of the much needed
        if PlugInstalled('vim-gutentags')                   " management of tags files in Vim.
            set tags=./.tags,.tags                          " Tags file search path
            let g:gutentags_project_root = ['.root', '.svn', '.git', '.project', 'package.json', '.ROOT']
            let g:gutentags_ctags_tagfile = '.tags'         " Tags file name.

                                                            " Enable gtags and ctags.
            let g:gutentags_modules = []
            if executable('ctags')
                let g:gutentags_modules += ['ctags']
            endif
            if executable('gtags-cscope') && executable('gtags')
                let g:gutentags_modules += ['gtags_cscope']
            endif

            let s:vim_tags = expand('~/.cache/tags')        " Tags file storage directory.
            let g:gutentags_cache_dir = s:vim_tags
            if !isdirectory(s:vim_tags)                     " If the directory does not exist, create it.
                silent! call mkdir(s:vim_tags, 'p')
            endif

            let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
            let g:gutentags_ctags_extra_args += ['--c++-kinds=+pxI']
            let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
                                                            " CTags options.

            let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']
                                                            " Universal ctags needed enable.

            let g:gutentags_auto_add_gtags_cscope = 0       " Disable audoload gtags database.
        endif
    " }

    " Plug 'preservim/nerdtree' {                           " The NERDTree is a file system explorer for the Vim editor.
        if PlugInstalled('nerdtree')
                                                            " When only the last window is left, exit directly.
            augroup ag#nerdtree
                autocmd bufenter * if (winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree()) | q | endif
            augroup END
            map <C-E> :NERDTreeToggle<CR>
        endif
    " }

    " Plug 'skywind3000/asyncrun.vim' {                     " Vim executes commands asynchronously.
        if PlugInstalled('asyncrun.vim')
            let g:asyncrun_open = 8

            noremap <F8> :AsyncRun gcc "%" -o "%<" <cr>

            augroup local-asyncrun
                au!
                au User AsyncRunStop copen | wincmd p
            augroup END
        endif
    " }

    " Plug 'skywind3000/gutentags_plus' {                   " Gutentags is a vim 8 dedicated plugin which will update gtags
        if PlugInstalled('gutentags_plus')                  " databasein background automatically on file change. Gutentags_plus
                                                            " works with gutentags and provides seemlessi databases switching.
            let g:gutentags_plus_switch = 1                 " change focus to quickfix window after search (optional).
        endif
    " }
" }

    " EDITING PLUGINS {
    " Plug 'editorconfig/editorconfig-vim' {                " EditorConfig helps maintain consistent coding styles for
                                                            " multiple developers working on the same project across various
                                                            " editors and IDEs.
        if PlugInstalled('editorconfig-vim')
            let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
        endif
    " }

    " Plug 'jiangmiao/auto-pairs' {                         " Insert or delete brackets, parens, quotes in pair.
         if PlugInstalled('auto-pairs')
            let g:AutoPairsFlyMode = 1
            let g:AutoPairsShortcutBackInsert = '<M-b>'
        endif
    " }

    " Plug 'junegunn/vim-easy-align' {                      " A simple, easy-to-use Vim alignment plugin.
        if PlugInstalled('vim-easy-align')
            xmap ga <Plug>(EasyAlign)
            nmap ga <Plug>(EasyAlign)
        endif
    " }

    "Plug 'kshenoy/vim-signature' {                         " vim-signature is a plugin to place, toggle and display marks.
        if PlugInstalled('vim-signature')
            let g:SignatureMap = {
                \ 'Leader'             :  'm',
                \ 'PlaceNextMark'      :  'm,',
                \ 'ToggleMarkAtLine'   :  'm.',
                \ 'PurgeMarksAtLine'   :  'm-',
                \ 'DeleteMark'         :  'dm',
                \ 'PurgeMarks'         :  'mda',
                \ 'PurgeMarkers'       :  'm<BS>',
                \ 'GotoNextLineAlpha'  :  "']",
                \ 'GotoPrevLineAlpha'  :  "'[",
                \ 'GotoNextSpotAlpha'  :  '`]',
                \ 'GotoPrevSpotAlpha'  :  '`[',
                \ 'GotoNextLineByPos'  :  "]'",
                \ 'GotoPrevLineByPos'  :  "['",
                \ 'GotoNextSpotByPos'  :  'mn',
                \ 'GotoPrevSpotByPos'  :  'mp',
                \ 'GotoNextMarker'     :  '[+',
                \ 'GotoPrevMarker'     :  '[-',
                \ 'GotoNextMarkerAny'  :  ']=',
                \ 'GotoPrevMarkerAny'  :  '[=',
                \ 'ListLocalMarks'     :  'ms',
                \ 'ListLocalMarkers'   :  'm?'
                \ }
        endif
    " }

    " Plug 'maxbrunsfeld/vim-yankstack' {                   " Is a lightweight implementation of the Emacs 'kill ring' for Vim.
        if PlugInstalled('vim-yankstack')
            " NOTHING
        endif
    " }

    " Plug 'nathanaelkane/vim-indent-guides' {              " Is a plugin for visually displaying indent levels in Vim.
        if PlugInstalled('vim-indent-guides')
            let g:indent_guides_enable_on_vim_startup = 1   " Auto start
            let g:indent_guides_start_level = 2             " Start level
            let g:indent_guides_guide_size = 1              " Black width
            let g:indent_guides_tab_guides = 0              " Disable Tab guides
            let g:indent_guides_space_guides = 1            " Enable space guides

            "let g:indent_guides_auto_colors = 0            " Auto color
            "autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd guibg=red ctermbg=3
            "autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
                                                            " Highlight

            let g:indent_guides_exclude_filetypes = ['help', 'nerdtree', 'defx']
                                                            " Exclude file types
        endif
    " }

    " Plug 'preservim/nerdcommenter' {                      " Comment functions so powerfulno comment necessary.
        if PlugInstalled('nerdcommenter')
            "Add spaces after comment delimiters by default
            let g:NERDSpaceDelims = 1
            " Use compact syntax for prettified multi-line comments
            let g:NERDCompactSexyComs = 1
            " Align line-wise comment delimiters flush left instead of following code indentation
            let g:NERDDefaultAlign = 'left'
            " Set a language to use its alternate delimiters by default
            let g:NERDAltDelims_java = 1
            " Add your own custom formats or override the defaults
            let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
            " Allow commenting and inverting empty lines (useful when commenting a region)
            let g:NERDCommentEmptyLines = 1
            " Enable trimming of trailing whitespace when uncommenting
            let g:NERDTrimTrailingWhitespace = 1
            " Enable NERDCommenterToggle to check all selected lines is commented or not 
            let g:NERDToggleCheckAllLines = 1
        endif
    " }

    " Plug 'sbdchd/neoformat' {                             " A (Neo)vim plugin for formatting code.
        if PlugInstalled('neoformat')
            " Managing Undo History
            "augroup fmt
            "    autocmd!
            "    autocmd BufWritePre * undojoin | Neoformat
            "augroup END
        endif
    " }

    " Plug 'sjl/gundo.vim' {                                " Gundo.vim is Vim plugin to visualize your Vim undo tree.
        if PlugInstalled('gundo.vim')
            let g:gundo_prefer_python3 = 1
            let g:gundo_width = 65
            let g:gundo_preview_height = 35
            let g:undo_right = 1

            nnoremap <Leader>un :GundoToggle<CR>
        endif
    " }

    " Plug 'terryma/vim-expand-region' {                    " vim-expand-region is a Vim plugin that allows you to
                                                            " visually select increasingly larger regions of text
                                                            " using the same key combination.
        if PlugInstalled('vim-expand-region')
            let g:expand_region_use_select_mode = 1
            call expand_region#custom_text_objects({
                \ "\/\\n\\n\<CR>": 1,
                \ 'a]' :1,
                \ 'ab' :1,
                \ 'aB' :1,
                \ 'ii' :0,
                \ 'ai' :0,
                \ })
       endif
    " }

    " Plug 'tpope/vim-repeat' {                             " Repeat.vim remaps . in a way that plugins can tap into it.
        if PlugInstalled('vim-repeat')
            silent! call repeat#set("\<Plug>MyWonderfulMap", v:count)
        endif
    " }

    " Plug 'wellle/targets.vim' {                           " Targets.vim is a Vim plugin that adds various text objects to
                                                            " give you more targets to operate on.
        if PlugInstalled('targets.vim')
            " NOTHING
        endif
    " }

    " Plug 'wellle/visual-split.vim' {                      " Vim plugin to control splits with visual selections or text objects.
        if PlugInstalled('visual-split.vim')
            " Visual-mode
            xmap <C-W>gr  <Plug>(Visual-Split-VSResize)
            xmap <C-W>gss <Plug>(Visual-Split-VSSplit)
            xmap <C-W>gsa <Plug>(Visual-Split-VSSplitAbove)
            xmap <C-W>gsb <Plug>(Visual-Split-VSSplitBelow)
            " Opterator-pending mode
            nmap <C-W>gr  <Plug>(Visual-Split-Resize)
            nmap <C-W>gss <Plug>(Visual-Split-Split)
            nmap <C-W>gsa <Plug>(Visual-Split-SplitAbove)
            nmap <C-W>gsb <Plug>(Visual-Split-SplitBelow)
        endif
    " }
" }

" SNIPPETS/SYNTAX/COMPLETION PLUGINS {
    " Plug 'SirVer/ultisnips' {                             " UltiSnips is the ultimate solution for snippets in Vim.
        if PlugInstalled('ultishnips')
            " Trigger configuration. Do not use YouCompleteMe.
            "let g:UltiSnipsExpandTrigger = '<tab>'
            let g:UltiSnipsJumpForwardTrigger = '<c-b>'
            let g:UltiSnipsJumpBackwardTrigger = '<c-z>'
            " If you want :UltiSnipsEdit to split your window.
            let g:UltiSnipsEditSplit = 'vertical'
        endif
    " }

    " Plug 'honza/vim-snippets' {                           " Snippets are separated from the engine.
        if PlugInstalled('vim-snippets')

        endif
    " }

    " Plug 'Valloric/YouCompleteMe' {                       " A code-completion engine for Vim.
        if PlugInstalled('YouCompleteMe')
            " Default config path
            let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
            " Disable confirm
            let g:ycm_confirm_extra_conf = 0
            let g:ycm_seed_identifiers_with_syntax = 1
            " Enable in comments
            let g:ycm_complete_in_comments = 1
            let g:ycm_collect_identifiers_from_comments_and_strings = 0
            " Enable in strings
            let g:ycm_complete_in_strings = 1
            let g:ycm_collect_identifiers_from_tags_files = 1
            " Enable wdth chars
            let g:ycm_min_num_of_chars_for_completion = 2
            " Auto close preview window
            let g:ycm_autoclose_preiew_window_after_completion = 1
            autocmd InsertLeave * if pumvisible() == 0|pclose|endif
            " Syntax key
            let g:ycm_seed_identifiers_with_syntax = 1
            " Ultisnips
            let g:ycm_use_ultisnips_completer = 1

            nnoremap <leader>g :YouCompleter GoTo<CR>
            let g:ycm_show_diagnostics_ui = 0
            let g:ycm_enable_diagnostic_signs = 0
            let g:ycm_enable_diagnostic_highlighting = 0
            let g:ycm_echo_current_diagnostic = 0

            let g:ycm_semantic_triggers =  {
            \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
            \ 'cs,lua,javascript': ['re!\w{2}'],
            \ }

            " Black list
            let g:ycm_filetype_blacklist = {
                \ 'tagbar': 1,
                \ 'qf' : 1,
                \ 'notes' : 1,
                \ 'markdown': 1,
                \ 'unite': 1,
                \ 'text': 1,
                \ 'vimwiki' : 1,
                \ 'pandoc' : 1,
                \ 'infolog' : 1,
                \ 'mail' : 1
                \ }
            let g:ycm_filetype_specific_completion_to_disable = {
                \ 'gitcommit' : 1
                \ }
            let g:ycm_add_preview_to_completeopt = 0
        endif
    " }

    " Plug 'dense-analysis/ale' {                           " ALE (Asynchronous Lint Engine).
        if PlugInstalled('ale')
            let g:ale_sign_column_always = 1                " Always open.
            let g:airline#extensions#ale#enabled = 1        " Integrated vim-airline plugin.

            let g:ale_echo_msg_error_str = 'E'              " Error message flag.
            let g:ale_echo_msg_warning_str = 'W'            " Warning information sign.
            let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
                                                            " Error message format.
            let g:ale_lint_on_text_changed = 'insert'       " Only open in insert mode
            let g:ale_lint_on_insert_leave = 1              " Turn on after leaving insert mode.
            let g:ale_lint_on_enter = 0                     " Do not check when opening file.

            let g:ale_completion_delay = 500                " Delay in sending inspection request.
            let g:ale_echo_delay = 20                       " Echo delay.
            let g:ale_lint_delay = 500                      " Check delay.

            nmap <silent> <Leader><C-k> <Plug>(ale_previous_wrap)
                                                            " Go to previous error.
            nmap <silent> <Leader><C-j> <Plug>(ale_next_wrap)
                                                            " Go to the next error.

            nmap <Leader>s :ALEToggle<CR>                   " Turn syntax checking on or off.
            nmap <Leader>d :ALEDetail<CR>                   " View details of errors or warnings.

            let g:ale_c_gcc_options = '-Wall -02 -std=c99'  " Gcc cflags options
            let g:ale_cpp_gcc_options = '-Wall -02 -std=c++14'
                                                            " Gcc cppflags options
            let g:ale_c_cppcheck_options = ''
            let g:ale_cpp_cppcheck_options = ''
        endif
    " }

    " Plug 'neoclide/coc.nvim' {                            " Language Server, true snippet and additional text editing support.
        if PlugInstalled('coc.nvim')
            " TextEdit might fail if hidden is not set.
            set hidden

            " Some servers have issues with backup files, see #649.
            set nobackup
            set nowritebackup

            " Give more space for displaying messages.
            "set cmdheight= 2

            " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
            " delays and poor user experience.
            set updatetime=300

            " Don't pass messages to |ins-completion-menu|.
            set shortmess+=c

            " Always show the signcolumn, otherwise it would shift the text each time
            " diagnostics appear/become resolved.
            if has("patch-8.1.1564")
              " Recently vim can merge signcolumn and number column into one
              set signcolumn=number
            else
              set signcolumn=yes
            endif

            " Use tab for trigger completion with characters ahead and navigate.
            " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
            " other plugin before putting this into your config.
            inoremap <silent><expr> <TAB>
                  \ pumvisible() ? "\<C-n>" :
                  \ <SID>check_back_space() ? "\<TAB>" :
                  \ coc#refresh()
            inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

            function! s:check_back_space() abort
              let col = col('.') - 1
              return !col || getline('.')[col - 1]  =~# '\s'
            endfunction

            " Use <c-space> to trigger completion.
            if has('nvim')
              inoremap <silent><expr> <c-space> coc#refresh()
            else
              inoremap <silent><expr> <c-@> coc#refresh()
            endif

            " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
            " position. Coc only does snippet and additional edit on confirm.
            " <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
            if exists('*complete_info')
              inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
            else
              inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
            endif

            " Use `[g` and `]g` to navigate diagnostics
            " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
            nmap <silent> [g <Plug>(coc-diagnostic-prev)
            nmap <silent> ]g <Plug>(coc-diagnostic-next)

            " GoTo code navigation.
            nmap <silent> gd <Plug>(coc-definition)
            nmap <silent> gy <Plug>(coc-type-definition)
            nmap <silent> gi <Plug>(coc-implementation)
            nmap <silent> gr <Plug>(coc-references)

            " Use K to show documentation in preview window.
            nnoremap <silent> K :call <SID>show_documentation()<CR>

            function! s:show_documentation()
              if (index(['vim','help'], &filetype) >= 0)
                execute 'h '.expand('<cword>')
              else
                call CocAction('doHover')
              endif
            endfunction

            " Highlight the symbol and its references when holding the cursor.
            autocmd CursorHold * silent call CocActionAsync('highlight')

            " Symbol renaming.
            nmap <leader>rn <Plug>(coc-rename)

            " Formatting selected code.
            xmap <leader>f  <Plug>(coc-format-selected)
            nmap <leader>f  <Plug>(coc-format-selected)

            augroup mygroup
              autocmd!
              " Setup formatexpr specified filetype(s).
              autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
              " Update signature help on jump placeholder.
              autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
            augroup end

            " Applying codeAction to the selected region.
            " Example: `<leader>aap` for current paragraph
            xmap <leader>a  <Plug>(coc-codeaction-selected)
            nmap <leader>a  <Plug>(coc-codeaction-selected)

            " Remap keys for applying codeAction to the current buffer.
            nmap <leader>ac  <Plug>(coc-codeaction)
            " Apply AutoFix to problem on the current line.
            nmap <leader>qf  <Plug>(coc-fix-current)

            " Map function and class text objects
            " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
            xmap if <Plug>(coc-funcobj-i)
            omap if <Plug>(coc-funcobj-i)
            xmap af <Plug>(coc-funcobj-a)
            omap af <Plug>(coc-funcobj-a)
            xmap ic <Plug>(coc-classobj-i)
            omap ic <Plug>(coc-classobj-i)
            xmap ac <Plug>(coc-classobj-a)
            omap ac <Plug>(coc-classobj-a)

            " Use CTRL-S for selections ranges.
            " Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
            nmap <silent> <C-s> <Plug>(coc-range-select)
            xmap <silent> <C-s> <Plug>(coc-range-select)

            " Add `:Format` command to format current buffer.
            command! -nargs=0 Format :call CocAction('format')

            " Add `:Fold` command to fold current buffer.
            command! -nargs=? Fold :call     CocAction('fold', <f-args>)

            " Add `:OR` command for organize imports of the current buffer.
            command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

            " Add (Neo)Vim's native statusline support.
            " NOTE: Please see `:h coc-status` for integrations with external plugins that
            " provide custom statusline: lightline.vim, vim-airline.
            set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

            " Mappings for CoCList
            " Show all diagnostics.
            nnoremap <silent><nowait> <space>a :<C-u>CocList diagnostics<cr>
            " Manage extensions.
            nnoremap <silent><nowait> <space>e :<C-u>CocList extensions<cr>
            " Show commands.
            nnoremap <silent><nowait> <space>c :<C-u>CocList commands<cr>
            " Find symbol of current document.
            nnoremap <silent><nowait> <space>o :<C-u>CocList outline<cr>
            " Search workspace symbols.
            nnoremap <silent><nowait> <space>s :<C-u>CocList -I symbols<cr>
            " Do default action for next item.
            nnoremap <silent><nowait> <space>j :<C-u>CocNext<CR>
            " Do default action for previous item.
            nnoremap <silent><nowait> <space>k :<C-u>CocPrev<CR>
            " Resume latest coc list.
            nnoremap <silent><nowait> <space>p :<C-u>CocListResume<CR>
        endif
    " }

    " Plug 'rdnetto/YCM-Generator' {                        " This is a script which generates a list of compiler flags
                                                            " from a project with an arbitrary build system.
        if PlugInstalled('YCM-Generator')
            " NOTHING
        endif
    " }
" }

" LANGUAGE PLUGINS {
    " Plug 'sheerun/vim-polyglot' {                         " A collection of language packs for Vim.
        if PlugInstalled('vim-polyglot')
            " NOTHING
        endif
    " }

    " Plug 'kkoomen/vim-doge' {                             " DoGe is a (Do)cumentation (Ge)nerator which will generate
                                                            " a proper documentation skeleton based on certain expressions
                                                            " (mainly functions).
        if PlugInstalled('vim-doge')
        endif
    " }
" }

" TOOLG PLUGINS {
    " Plug 'suan/vim-instant-markdown' {                    " Markdown preview.
        if PlugInstalled('vim-instant-markdown')
            let g:instant_markdown_slow = 1
            let g:instant_markdown_autostart = 0            " Turn off automatic preview.
        endif
    " }

    " Plug 'tpope/vim-fugitive' {                           " Fugitive is the premier Vim plugin for Git.
        if PlugInstalled('vim-fugitive')
            " NOTHING
        endif
    " }

    " Plug 'vim-scripts/DrawIt' {                           " DrawIt is a plugin which allows one to draw lines left, right,
                                                            " up, down, and along both slants.
        if PlugInstalled('DrawIt')
            " NOTHING
        endif
    " }

    " Plug 'yianwillis/vimcdoc' {                           " Vim Chinese document.
        if PlugInstalled('vimcdoc')
            set langmenu=en_US.UTF-8                        " Menu language and coding.
            if version >= 603
                set helplang=zh                             " Help language.
            endif
        endif
    " }
" }

" PLUGIN CONFIGUARE END
